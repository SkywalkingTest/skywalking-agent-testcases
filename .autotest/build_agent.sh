#!/bin/bash
#ARG_POSITIONAL_SINGLE([repo],[The repository of build project])
#ARG_POSITIONAL_SINGLE([branch],[The branch name of build project])
#ARG_POSITIONAL_SINGLE([target_dir],[The target directory])
#ARG_OPTIONAL_SINGLE([build],[],[skip to build project],[on])
#ARG_OPTIONAL_SINGLE([clone_code],[],[skip to clone code],[off])
#ARG_OPTIONAL_SINGLE([fetch_latest_code],[],[fetch latest code],[on])
#ARG_HELP([])
#ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_build="on"
_arg_clone_code="off"
_arg_fetch_latest_code="on"


print_help()
{
	printf 'Usage: %s [--build <arg>] [--clone_code <arg>] [--fetch_latest_code <arg>] [-h|--help] <repo> <branch> <target_dir>\n' "$0"
	printf '\t%s\n' "<repo>: The repository of build project"
	printf '\t%s\n' "<branch>: The branch name of build project"
	printf '\t%s\n' "<target_dir>: The target directory"
	printf '\t%s\n' "--build: skip to build project (default: 'on')"
	printf '\t%s\n' "--clone_code: skip to clone code (default: 'off')"
	printf '\t%s\n' "--fetch_latest_code: fetch latest code (default: 'on')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--build)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_build="$2"
				shift
				;;
			--build=*)
				_arg_build="${_key##--build=}"
				;;
			--clone_code)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_clone_code="$2"
				shift
				;;
			--clone_code=*)
				_arg_clone_code="${_key##--clone_code=}"
				;;
			--fetch_latest_code)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_fetch_latest_code="$2"
				shift
				;;
			--fetch_latest_code=*)
				_arg_fetch_latest_code="${_key##--fetch_latest_code=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'repo', 'branch' and 'target_dir'"
	test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_repo _arg_branch _arg_target_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#
PRG="$0"
PRGDIR=`dirname "$PRG"`
[ -z "$BUILD_HOME" ] && BUILD_HOME=`cd "$PRGDIR" >/dev/null; pwd`

#declare variables
AGENT_DIR=${BUILD_HOME}/../workspace/agent
AGENT_WITH_OPTIONAL_PLUGIN_DIR=${BUILD_HOME}/../workspace/agent-with-optional-plugins

${BUILD_HOME}/build_project.sh --fetch_latest_code ${_arg_fetch_latest_code} --clone_code ${_arg_clone_code} ${_arg_repo} ${_arg_branch} ${_arg_target_dir}

if [ "${_arg_build}" = "on" ]; then
    cd ${_arg_target_dir} && mvn clean package -Dmaven.test.skip=true
fi

if [ ! -d "${_arg_target_dir}/skywalking-agent" ]; then
    echo "[ERROR] the agent folder is not exist, Please make sure the command without --no-build."
    exit -1
fi

echo "[INFO] copy agent package"
mkdir -p ${AGENT_DIR} && cp -r ${_arg_target_dir}/skywalking-agent/* ${AGENT_DIR}
echo "[INFO] build agent package with optional plugins"
mkdir -p ${AGENT_WITH_OPTIONAL_PLUGIN_DIR} && cp -r ${_arg_target_dir}/skywalking-agent/* ${AGENT_WITH_OPTIONAL_PLUGIN_DIR} && cp -r ${AGENT_WITH_OPTIONAL_PLUGIN_DIR}/optional-plugins/* ${AGENT_WITH_OPTIONAL_PLUGIN_DIR}/plugins/

#
# ] <-- needed because of Argbash
